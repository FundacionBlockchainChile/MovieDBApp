./app/src/androidTest/java/cl/moviedbapp/ExampleInstrumentedTest.kt

package cl.moviedbapp

import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*

/**
 * Instrumented test, which will execute on an Android device.
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals("cl.moviedbapp", appContext.packageName)
    }
}

./app/src/test/java/cl/moviedbapp/ExampleUnitTest.kt

package cl.moviedbapp

import org.junit.Test

import org.junit.Assert.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }
}

./app/src/main/java/cl/moviedbapp/MyApplication.kt

package cl.moviedbapp

import android.app.Application
import dagger.hilt.android.HiltAndroidApp

@HiltAndroidApp
class MyApplication : Application() {
}


./app/src/main/java/cl/moviedbapp/MainActivity.kt

package cl.moviedbapp

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.viewModels
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import cl.moviedbapp.ui.theme.MovieDBAppTheme
import cl.moviedbapp.view.HomeView
import cl.moviedbapp.view.MovieDetailView
import cl.moviedbapp.viewmodel.MovieViewModel
import dagger.hilt.android.AndroidEntryPoint

@AndroidEntryPoint
class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MovieDBAppTheme {
                val navController = rememberNavController()
                val viewModel: MovieViewModel = hiltViewModel()

                NavHost(navController = navController, startDestination = "home") {
                    composable("home") {
                        HomeView(viewModel, navController)
                    }
                    composable("movieDetail/{movieId}") { backStackEntry ->
                        val movieId = backStackEntry.arguments?.getString("movieId")
                        if (movieId != null) {
                            MovieDetailView(movieId, viewModel, navController)
                        }
                    }
                }
            }
        }
    }
}


./app/src/main/java/cl/moviedbapp/viewmodel/MovieViewModel.kt

package cl.moviedbapp.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import cl.moviedbapp.repository.MovieRepository
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch
import cl.moviedbapp.model.MovieEntity
import androidx.paging.Pager
import androidx.paging.PagingConfig
import androidx.paging.PagingData
import androidx.paging.cachedIn
import kotlinx.coroutines.flow.Flow
import dagger.hilt.android.lifecycle.HiltViewModel
import javax.inject.Inject

@HiltViewModel
class MovieViewModel @Inject constructor(  // Añadir la anotación @HiltViewModel y el constructor con @Inject
    private val repository: MovieRepository
) : ViewModel() {

    private val _movieList = MutableStateFlow<List<MovieEntity>>(emptyList())
    val movieList: StateFlow<List<MovieEntity>> = _movieList

    init {
        fetchMovies()
    }

    private fun fetchMovies() {
        viewModelScope.launch {
            repository.getAllMoviesFromDb()
                .onEach { movies ->
                    if (movies.isEmpty()) {
                        // Fetch from API if the database is empty
                        val response = repository.getMoviesPaged(1)
                        val movieEntities = response.results.map { movie ->
                            MovieEntity(
                                movie.id,
                                movie.title,
                                movie.overview,
                                movie.posterPath,
                                movie.releaseDate,
                                movie.voteAverage
                            )
                        }
                        repository.insertMovies(movieEntities)
                    } else {
                        _movieList.value = movies
                    }
                }
                .launchIn(this)
        }
    }

    fun getMoviesPager(): Flow<PagingData<MovieEntity>> {
        return Pager(
            config = PagingConfig(pageSize = 20, enablePlaceholders = false),
            pagingSourceFactory = { repository.getPagingSource() }
        ).flow.cachedIn(viewModelScope)
    }

    fun getMovieById(id: Int): MovieEntity? {
        return _movieList.value.find { it.id == id }
    }
}


./app/src/main/java/cl/moviedbapp/ui/theme/Color.kt

package cl.moviedbapp.ui.theme

import androidx.compose.ui.graphics.Color

val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)

./app/src/main/java/cl/moviedbapp/ui/theme/Theme.kt

package cl.moviedbapp.ui.theme

import android.app.Activity
import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.platform.LocalContext

private val DarkColorScheme = darkColorScheme(
    primary = Purple80,
    secondary = PurpleGrey80,
    tertiary = Pink80
)

private val LightColorScheme = lightColorScheme(
    primary = Purple40,
    secondary = PurpleGrey40,
    tertiary = Pink40

    /* Other default colors to override
    background = Color(0xFFFFFBFE),
    surface = Color(0xFFFFFBFE),
    onPrimary = Color.White,
    onSecondary = Color.White,
    onTertiary = Color.White,
    onBackground = Color(0xFF1C1B1F),
    onSurface = Color(0xFF1C1B1F),
    */
)

@Composable
fun MovieDBAppTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    // Dynamic color is available on Android 12+
    dynamicColor: Boolean = true,
    content: @Composable () -> Unit
) {
    val colorScheme = when {
        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
            val context = LocalContext.current
            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
        }

        darkTheme -> DarkColorScheme
        else -> LightColorScheme
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = Typography,
        content = content
    )
}

./app/src/main/java/cl/moviedbapp/ui/theme/Type.kt

package cl.moviedbapp.ui.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp

// Set of Material typography styles to start with
val Typography = Typography(
    bodyLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 16.sp,
        lineHeight = 24.sp,
        letterSpacing = 0.5.sp
    )
    /* Other default text styles to override
    titleLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 22.sp,
        lineHeight = 28.sp,
        letterSpacing = 0.sp
    ),
    labelSmall = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Medium,
        fontSize = 11.sp,
        lineHeight = 16.sp,
        letterSpacing = 0.5.sp
    )
    */
)

./app/src/main/java/cl/moviedbapp/repository/MovieRepository.kt

package cl.moviedbapp.repository

import cl.moviedbapp.model.MovieResponse
import cl.moviedbapp.util.Constants
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import retrofit2.http.GET
import retrofit2.http.Query
import cl.moviedbapp.model.MovieDao
import cl.moviedbapp.model.MovieEntity
import kotlinx.coroutines.flow.Flow
import javax.inject.Inject
import androidx.paging.PagingSource

interface MovieApi {
    @GET("discover/movie")
    suspend fun getMoviesPaged(
        @Query("page") page: Int,
        @Query("language") language: String = "en-US",
        @Query("api_key") apiKey: String = Constants.API_KEY
    ): MovieResponse
}

class MovieRepository @Inject constructor(private val movieDao: MovieDao) {

    private val retrofit = Retrofit.Builder()
        .baseUrl(Constants.BASE_URL)
        .addConverterFactory(GsonConverterFactory.create())
        .build()

    private val api = retrofit.create(MovieApi::class.java)

    suspend fun getMoviesPaged(page: Int): MovieResponse {
        return api.getMoviesPaged(page)
    }

    suspend fun insertMovies(movies: List<MovieEntity>) {
        movieDao.insertMovies(movies)
    }

    fun getAllMoviesFromDb(): Flow<List<MovieEntity>> {
        return movieDao.getAllMovies()
    }

    fun getPagingSource(): PagingSource<Int, MovieEntity> {
        return movieDao.getMoviesPagingSource()  // Asegúrate de que el DAO tenga esta función implementada
    }
}


./app/src/main/java/cl/moviedbapp/di/DatabaseModule.kt

package cl.moviedbapp.di

import android.content.Context
import androidx.room.Room
import cl.moviedbapp.data.MovieDatabase
import cl.moviedbapp.model.MovieDao
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.qualifiers.ApplicationContext
import dagger.hilt.components.SingletonComponent
import javax.inject.Singleton

@Module
@InstallIn(SingletonComponent::class)
object DatabaseModule {

    @Provides
    @Singleton
    fun provideDatabase(@ApplicationContext context: Context): MovieDatabase {  // Asegúrate de usar @ApplicationContext
        return Room.databaseBuilder(
            context.applicationContext,
            MovieDatabase::class.java,
            "movies.db"
        ).build()
    }

    @Provides
    fun provideMovieDao(database: MovieDatabase): MovieDao {
        return database.movieDao()
    }
}


./app/src/main/java/cl/moviedbapp/util/Constants.kt

package cl.moviedbapp.util

object Constants {
    const val BASE_URL = "https://api.themoviedb.org/3/"
    const val API_KEY = "2cef883d1264659c4ce23a2ccf164ad4" // Replace with your actual API key
}


./app/src/main/java/cl/moviedbapp/model/Movie.kt

package cl.moviedbapp.model
import com.google.gson.annotations.SerializedName

data class Movie(
    val id: Int,

    @SerializedName("title")
    val title: String,

    @SerializedName("overview")
    val overview: String,

    @SerializedName("poster_path")
    val posterPath: String?,  // Mapea con poster_path del JSON

    @SerializedName("release_date")
    val releaseDate: String?,  // Mapea con release_date del JSON

    @SerializedName("vote_average")
    val voteAverage: Double  // Mapea con vote_average del JSON
)

data class MovieResponse(
    val results: List<Movie>
)


./app/src/main/java/cl/moviedbapp/model/MovieDao.kt

package cl.moviedbapp.model

import androidx.room.Dao
import androidx.room.Insert
import androidx.room.OnConflictStrategy
import androidx.room.Query
import kotlinx.coroutines.flow.Flow
import androidx.paging.PagingSource

@Dao
interface MovieDao {
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertMovies(movies: List<MovieEntity>)

    @Query("SELECT * FROM movies ORDER BY title ASC")
    fun getMoviesPagingSource(): PagingSource<Int, MovieEntity>  // Paginación desde Room

    @Query("SELECT * FROM movies ORDER BY title ASC")
    fun getAllMovies(): Flow<List<MovieEntity>>
}


./app/src/main/java/cl/moviedbapp/model/MovieEntity.kt

package cl.moviedbapp.model

import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "movies")
data class MovieEntity(
    @PrimaryKey val id: Int,
    @ColumnInfo(name = "title") val title: String,
    @ColumnInfo(name = "overview") val overview: String,
    @ColumnInfo(name = "poster_path") val posterPath: String?,
    @ColumnInfo(name = "release_date") val releaseDate: String?,
    @ColumnInfo(name = "vote_average") val voteAverage: Double
)


./app/src/main/java/cl/moviedbapp/view/MovieDetailView.kt

package cl.moviedbapp.view

import android.annotation.SuppressLint
import androidx.compose.foundation.layout.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import cl.moviedbapp.viewmodel.MovieViewModel

@OptIn(ExperimentalMaterial3Api::class)
@SuppressLint("UnusedMaterial3ScaffoldPaddingParameter")
@Composable
fun MovieDetailView(movieId: String, viewModel: MovieViewModel, navController: NavController) {
    // Convierte el movieId de String a Int
    val selectedMovie = viewModel.getMovieById(movieId.toIntOrNull() ?: 0)

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text(selectedMovie?.title ?: "Movie Detail") },
                navigationIcon = {
                    IconButton(onClick = { navController.navigateUp() }) {
                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                    }
                }
            )
        }
    ) {
        Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {
            Text(selectedMovie?.overview ?: "", style = MaterialTheme.typography.bodyMedium)
            Text("Release date: ${selectedMovie?.releaseDate}", style = MaterialTheme.typography.bodySmall)
            Text("Rating: ${selectedMovie?.voteAverage}", style = MaterialTheme.typography.bodySmall)
        }
    }
}


./app/src/main/java/cl/moviedbapp/view/HomeView.kt

package cl.moviedbapp.view

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavHostController
import androidx.paging.compose.collectAsLazyPagingItems
import androidx.paging.compose.items
import cl.moviedbapp.model.MovieEntity
import cl.moviedbapp.viewmodel.MovieViewModel
import coil.compose.SubcomposeAsyncImage
import kotlinx.coroutines.launch

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HomeView(viewModel: MovieViewModel, navController: NavHostController) {
    val coroutineScope = rememberCoroutineScope()
    val moviePagingItems = viewModel.getMoviesPager().collectAsLazyPagingItems()

    Scaffold(
        topBar = { TopAppBar(title = { Text("Movies") }) }
    ) { padding ->
        LazyColumn(modifier = Modifier.fillMaxSize().padding(padding)) {
            items(moviePagingItems) { movieEntity ->
                if (movieEntity != null) {
                    MovieCard(movieEntity) {
                        navController.navigate("movieDetail/${movieEntity.id}")
                    }
                }
            }
        }
    }
}

@Composable
fun MovieCard(movie: MovieEntity, onClick: () -> Unit) {  // Acepta MovieEntity en lugar de Movie
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(16.dp)
            .clickable { onClick() },
        shape = MaterialTheme.shapes.medium,
        elevation = CardDefaults.cardElevation(8.dp) // Mayor elevación para resaltar la tarjeta
    ) {
        Column(modifier = Modifier.fillMaxWidth()) {

            // Imagen de la película
            val imageUrl = "https://image.tmdb.org/t/p/w500/${movie.posterPath}"
            SubcomposeAsyncImage(
                model = imageUrl,
                contentDescription = movie.title,
                modifier = Modifier
                    .fillMaxWidth()
                    .height(200.dp),  // Imagen destacada
                contentScale = ContentScale.Crop // Ajustar la imagen al tamaño sin deformar
            )

            Spacer(modifier = Modifier.height(8.dp))

            // Contenedor para el título y detalles
            Column(modifier = Modifier.padding(16.dp)) {

                // Título de la película
                Text(
                    text = movie.title,
                    style = MaterialTheme.typography.titleLarge.copy(
                        fontWeight = FontWeight.Bold,
                        fontSize = 20.sp
                    ),
                    maxLines = 2,
                    overflow = TextOverflow.Ellipsis
                )

                Spacer(modifier = Modifier.height(4.dp))

                // Descripción (truncada si es muy larga)
                Text(
                    text = movie.overview,
                    style = MaterialTheme.typography.bodyMedium.copy(
                        color = Color.Gray
                    ),
                    maxLines = 3,
                    overflow = TextOverflow.Ellipsis
                )

                Spacer(modifier = Modifier.height(8.dp))

                // Detalles adicionales: Fecha y Calificación
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    // Fecha de lanzamiento
                    Text(
                        text = "Release: ${movie.releaseDate}",
                        style = MaterialTheme.typography.bodySmall.copy(
                            color = Color.Gray
                        )
                    )

                    // Calificación
                    Text(
                        text = "⭐ ${movie.voteAverage}",
                        style = MaterialTheme.typography.bodyMedium.copy(
                            fontWeight = FontWeight.Bold,
                            color = MaterialTheme.colorScheme.primary
                        )
                    )
                }
            }
        }
    }
}


./app/src/main/java/cl/moviedbapp/data/MovieDataSource.kt

package cl.moviedbapp.data

import androidx.paging.PagingSource
import androidx.paging.PagingState
import cl.moviedbapp.model.Movie
import cl.moviedbapp.repository.MovieRepository

class MovieDataSource(private val repository: MovieRepository) : PagingSource<Int, Movie>() {

    override suspend fun load(params: LoadParams<Int>): LoadResult<Int, Movie> {
        return try {
            val currentPage = params.key ?: 1  // Comienza en la página 1
            val response = repository.getMoviesPaged(currentPage)
            val movies = response.results

            LoadResult.Page(
                data = movies,
                prevKey = if (currentPage == 1) null else currentPage - 1,
                nextKey = if (movies.isEmpty()) null else currentPage + 1
            )
        } catch (e: Exception) {
            LoadResult.Error(e)
        }
    }

    override fun getRefreshKey(state: PagingState<Int, Movie>): Int? {
        return state.anchorPosition?.let { position ->
            state.closestPageToPosition(position)?.prevKey?.plus(1)
                ?: state.closestPageToPosition(position)?.nextKey?.minus(1)
        }
    }
}


./app/src/main/java/cl/moviedbapp/data/MovieDatabase.kt

package cl.moviedbapp.data

import androidx.room.Database
import androidx.room.RoomDatabase
import cl.moviedbapp.model.MovieDao
import cl.moviedbapp.model.MovieEntity

@Database(entities = [MovieEntity::class], version = 1)
abstract class MovieDatabase : RoomDatabase() {
    abstract fun movieDao(): MovieDao
}


