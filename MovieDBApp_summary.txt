File: ./app/src/androidTest/java/cl/moviedbapp/ExampleInstrumentedTest.kt

package cl.moviedbapp

import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*

/**
 * Instrumented test, which will execute on an Android device.
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals("cl.moviedbapp", appContext.packageName)
    }
}
================================================================================

File: ./app/src/test/java/cl/moviedbapp/ExampleUnitTest.kt

package cl.moviedbapp

import org.junit.Test

import org.junit.Assert.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }
}
================================================================================

File: ./app/src/main/java/cl/moviedbapp/MainActivity.kt

package cl.moviedbapp

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import cl.moviedbapp.ui.theme.MovieDBAppTheme
import cl.moviedbapp.view.HomeView
import cl.moviedbapp.view.MovieDetailView
import cl.moviedbapp.viewmodel.MovieViewModel
import androidx.hilt.navigation.compose.hiltViewModel
import dagger.hilt.android.AndroidEntryPoint

@AndroidEntryPoint
class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MovieDBAppTheme {
                val navController = rememberNavController()
                val viewModel: MovieViewModel = hiltViewModel() // Usar hiltViewModel() en lugar de viewModel()

                NavHost(navController = navController, startDestination = "home") {
                    composable("home") {
                        HomeView(viewModel, navController)
                    }
                    composable("movieDetail/{movieId}") { backStackEntry ->
                        val movieId = backStackEntry.arguments?.getString("movieId")
                        if (movieId != null) {
                            MovieDetailView(movieId, viewModel, navController)
                        }
                    }
                }
            }
        }
    }
}

================================================================================

File: ./app/src/main/java/cl/moviedbapp/viewmodel/MovieViewModel.kt

package cl.moviedbapp.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import cl.moviedbapp.repository.MovieRepository
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch
import kotlinx.coroutines.flow.Flow
import cl.moviedbapp.db.MovieEntity
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.map
import javax.inject.Inject

@HiltViewModel
class MovieViewModel @Inject constructor(
    private val repository: MovieRepository // Inyecta el repositorio con @Inject
) : ViewModel() {

    val movieList: Flow<List<MovieEntity>> = repository.getAllMovies()

    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading

    // Obtener películas desde la API y guardar en SQLite
    fun fetchMoviesFromApi(page: Int) {
        viewModelScope.launch {
            val movies = repository.getMoviesFromApi(page)
            repository.insertMovies(movies)
        }
    }

    // Obtener una película por su ID desde la base de datos
    fun getMovieById(id: String): Flow<MovieEntity?> {
        return movieList.map { movies ->
            movies.find { it.id == id.toIntOrNull() }
        }
    }
}
================================================================================

File: ./app/src/main/java/cl/moviedbapp/ui/theme/Color.kt

package cl.moviedbapp.ui.theme

import androidx.compose.ui.graphics.Color

val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)
================================================================================

File: ./app/src/main/java/cl/moviedbapp/ui/theme/Theme.kt

package cl.moviedbapp.ui.theme

import android.app.Activity
import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.platform.LocalContext

private val DarkColorScheme = darkColorScheme(
    primary = Purple80,
    secondary = PurpleGrey80,
    tertiary = Pink80
)

private val LightColorScheme = lightColorScheme(
    primary = Purple40,
    secondary = PurpleGrey40,
    tertiary = Pink40

    /* Other default colors to override
    background = Color(0xFFFFFBFE),
    surface = Color(0xFFFFFBFE),
    onPrimary = Color.White,
    onSecondary = Color.White,
    onTertiary = Color.White,
    onBackground = Color(0xFF1C1B1F),
    onSurface = Color(0xFF1C1B1F),
    */
)

@Composable
fun MovieDBAppTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    // Dynamic color is available on Android 12+
    dynamicColor: Boolean = true,
    content: @Composable () -> Unit
) {
    val colorScheme = when {
        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
            val context = LocalContext.current
            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
        }

        darkTheme -> DarkColorScheme
        else -> LightColorScheme
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = Typography,
        content = content
    )
}
================================================================================

File: ./app/src/main/java/cl/moviedbapp/ui/theme/Type.kt

package cl.moviedbapp.ui.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp

// Set of Material typography styles to start with
val Typography = Typography(
    bodyLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 16.sp,
        lineHeight = 24.sp,
        letterSpacing = 0.5.sp
    )
    /* Other default text styles to override
    titleLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 22.sp,
        lineHeight = 28.sp,
        letterSpacing = 0.sp
    ),
    labelSmall = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Medium,
        fontSize = 11.sp,
        lineHeight = 16.sp,
        letterSpacing = 0.5.sp
    )
    */
)
================================================================================

File: ./app/src/main/java/cl/moviedbapp/repository/MovieRepository.kt

package cl.moviedbapp.repository

import cl.moviedbapp.model.MovieResponse
import cl.moviedbapp.util.Constants
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import retrofit2.http.GET
import retrofit2.http.Query
import cl.moviedbapp.db.MovieDao
import cl.moviedbapp.db.MovieEntity
import cl.moviedbapp.model.Movie
import kotlinx.coroutines.flow.Flow

interface MovieApi {
    @GET("movie/now_playing")
    suspend fun getMoviesPaged(
        @Query("page") page: Int,
        @Query("language") language: String = "en-US",
        @Query("api_key") apiKey: String = Constants.API_KEY
    ): MovieResponse
}

class MovieRepository(private val movieDao: MovieDao) {

    private val retrofit = Retrofit.Builder()
        .baseUrl(Constants.BASE_URL)
        .addConverterFactory(GsonConverterFactory.create())
        .build()

    private val api = retrofit.create(MovieApi::class.java)

    // Obtener películas desde la API
    suspend fun getMoviesFromApi(page: Int): List<MovieEntity> {
        val response = api.getMoviesPaged(page)
        return response.results.map {
            MovieEntity(
                id = it.id,
                title = it.title,
                overview = it.overview,
                posterPath = it.posterPath,
                releaseDate = it.releaseDate,
                voteAverage = it.voteAverage
            )
        }
    }

    // Insertar en base de datos
    suspend fun insertMovies(movies: List<MovieEntity>) {
        movieDao.insertAll(movies)
    }

    // Obtener todas las películas desde la base de datos
    fun getAllMovies(): Flow<List<MovieEntity>> {
        return movieDao.getAllMovies()
    }
}
================================================================================

File: ./app/src/main/java/cl/moviedbapp/di/AppModule.kt

// AppModule.kt
package cl.moviedbapp.di

import android.app.Application
import androidx.room.Room
import cl.moviedbapp.db.MovieDatabase
import cl.moviedbapp.repository.MovieRepository
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.components.SingletonComponent
import javax.inject.Singleton

@Module
@InstallIn(SingletonComponent::class)
object AppModule {

    @Provides
    @Singleton
    fun provideMovieDatabase(app: Application): MovieDatabase {
        return Room.databaseBuilder(
            app,
            MovieDatabase::class.java,
            "movie_database"
        ).build()
    }

    @Provides
    @Singleton
    fun provideMovieDao(db: MovieDatabase) = db.movieDao()

    @Provides
    @Singleton
    fun provideMovieRepository(movieDao: MovieDao): MovieRepository {
        return MovieRepository(movieDao)
    }
}

================================================================================

File: ./app/src/main/java/cl/moviedbapp/util/Constants.kt

package cl.moviedbapp.util

object Constants {
    const val BASE_URL = "https://api.themoviedb.org/3/"
    const val API_KEY = "2cef883d1264659c4ce23a2ccf164ad4" // Replace with your actual API key
}

================================================================================

File: ./app/src/main/java/cl/moviedbapp/model/Movie.kt

package cl.moviedbapp.model

import com.google.gson.annotations.SerializedName

data class Movie(
    val id: Int,

    @SerializedName("title")
    val title: String,

    @SerializedName("overview")
    val overview: String,

    @SerializedName("poster_path")
    val posterPath: String?,  // Mapea con poster_path del JSON

    @SerializedName("release_date")
    val releaseDate: String?,  // Mapea con release_date del JSON

    @SerializedName("vote_average")
    val voteAverage: Double  // Mapea con vote_average del JSON
)

data class MovieResponse(
    val results: List<Movie>
)

================================================================================

File: ./app/src/main/java/cl/moviedbapp/view/MovieDetailView.kt

package cl.moviedbapp.view

import android.annotation.SuppressLint
import androidx.compose.foundation.layout.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import cl.moviedbapp.viewmodel.MovieViewModel

@OptIn(ExperimentalMaterial3Api::class)
@SuppressLint("UnusedMaterial3ScaffoldPaddingParameter")
@Composable
fun MovieDetailView(movieId: String, viewModel: MovieViewModel, navController: NavController) {
    // Recolecta el Flow y obtén los datos de la base de datos
    val selectedMovie by viewModel.getMovieById(movieId).collectAsState(initial = null)

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text(selectedMovie?.title ?: "Movie Detail") },
                navigationIcon = {
                    IconButton(onClick = { navController.navigateUp() }) {
                        Icon(Icons.Default.ArrowBack, contentDescription = "Back")
                    }
                }
            )
        }
    ) {
        Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {
            Text(selectedMovie?.overview ?: "", style = MaterialTheme.typography.bodyMedium)
            Text("Release date: ${selectedMovie?.releaseDate}", style = MaterialTheme.typography.bodySmall)
            Text("Rating: ${selectedMovie?.voteAverage}", style = MaterialTheme.typography.bodySmall)
        }
    }
}

================================================================================

File: ./app/src/main/java/cl/moviedbapp/view/HomeView.kt

package cl.moviedbapp.view

import android.util.Log
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavHostController
import cl.moviedbapp.viewmodel.MovieViewModel
import coil.compose.SubcomposeAsyncImage
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.Scaffold
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import cl.moviedbapp.db.MovieEntity

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HomeView(viewModel: MovieViewModel, navController: NavHostController) {
    val movies by viewModel.movieList.collectAsState(initial = emptyList())

    Scaffold(
        topBar = { TopAppBar(title = { Text("Movies") }) }
    ) { padding ->
        LazyColumn(modifier = Modifier.fillMaxSize().padding(padding)) {
            items(movies) { movie ->
                MovieCard(movie) {
                    navController.navigate("movieDetail/${movie.id}")
                }
            }
        }
    }
}

@Composable
fun MovieCard(movie: MovieEntity, onClick: () -> Unit) {
    Log.d("MovieCard", "posterPath: ${movie}")
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(16.dp)
            .clickable { onClick() },
        shape = MaterialTheme.shapes.medium,
        elevation = CardDefaults.cardElevation(8.dp) // Mayor elevación para resaltar la tarjeta
    ) {
        Column(modifier = Modifier.fillMaxWidth()) {

            // Imagen de la película
            // Manejar la imagen: si posterPath es nulo, usar una imagen de marcador de posición
            val imageUrl = if (movie.posterPath != null) {
                "https://image.tmdb.org/t/p/w500${movie.posterPath}"
            } else {
                "https://image.tmdb.org/t/p/w500/1E5baAaEse26fej7uHcjOgEE2t2.jpg"  // URL de marcador de posición
            }
            SubcomposeAsyncImage(
                model = imageUrl,
                contentDescription = movie.title,
                modifier = Modifier
                    .fillMaxWidth()
                    .height(200.dp),  // Imagen destacada
                contentScale = ContentScale.Crop // Ajustar la imagen al tamaño sin deformar
            )

            Spacer(modifier = Modifier.height(8.dp))

            // Contenedor para el título y detalles
            Column(modifier = Modifier.padding(16.dp)) {

                // Título de la película
                Text(
                    text = movie.title,
                    style = MaterialTheme.typography.titleLarge.copy(
                        fontWeight = FontWeight.Bold,
                        fontSize = 20.sp
                    ),
                    maxLines = 2,
                    overflow = TextOverflow.Ellipsis
                )

                Spacer(modifier = Modifier.height(4.dp))

                // Descripción (truncada si es muy larga)
                Text(
                    text = movie.overview,
                    style = MaterialTheme.typography.bodyMedium.copy(
                        color = Color.Gray
                    ),
                    maxLines = 3,
                    overflow = TextOverflow.Ellipsis
                )

                Spacer(modifier = Modifier.height(8.dp))

                // Detalles adicionales: Fecha y Calificación
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    // Fecha de lanzamiento
                    Text(
                        text = "Release: ${movie.releaseDate}",
                        style = MaterialTheme.typography.bodySmall.copy(
                            color = Color.Gray
                        )
                    )

                    // Calificación
                    Text(
                        text = "⭐ ${movie.voteAverage}",
                        style = MaterialTheme.typography.bodyMedium.copy(
                            fontWeight = FontWeight.Bold,
                            color = MaterialTheme.colorScheme.primary
                        )
                    )
                }
            }
        }
    }
}



================================================================================

File: ./app/src/main/java/cl/moviedbapp/db/MovieDao.kt

package cl.moviedbapp.db

import androidx.room.Dao
import androidx.room.Insert
import androidx.room.OnConflictStrategy
import androidx.room.Query
import kotlinx.coroutines.flow.Flow

@Dao
interface MovieDao {
    @Query("SELECT * FROM movies")
    fun getAllMovies(): Flow<List<MovieEntity>>

    @Query("SELECT * FROM movies WHERE id = :id")
    fun getMovieById(id: Int): MovieEntity?

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertAll(movies: List<MovieEntity>)

    @Query("DELETE FROM movies")
    suspend fun clearMovies()
}

================================================================================

File: ./app/src/main/java/cl/moviedbapp/db/MovieEntity.kt

package cl.moviedbapp.db

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "movies")
data class MovieEntity(
    @PrimaryKey val id: Int,
    val title: String,
    val overview: String,
    val posterPath: String?,
    val releaseDate: String?,
    val voteAverage: Double
)

================================================================================

File: ./app/src/main/java/cl/moviedbapp/db/MovieDatabase.kt

package cl.moviedbapp.db

import android.content.Context
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase

@Database(entities = [MovieEntity::class], version = 1)
abstract class MovieDatabase : RoomDatabase() {
    abstract fun movieDao(): MovieDao

    companion object {
        @Volatile
        private var INSTANCE: MovieDatabase? = null

        fun getDatabase(context: Context): MovieDatabase {
            return INSTANCE ?: synchronized(this) {
                val instance = Room.databaseBuilder(
                    context.applicationContext,
                    MovieDatabase::class.java,
                    "movie_database"
                ).build()
                INSTANCE = instance
                instance
            }
        }
    }
}

================================================================================

File: ./app/src/main/java/cl/moviedbapp/data/MovieDataSource.kt

package cl.moviedbapp.data

import androidx.paging.PagingSource
import androidx.paging.PagingState
import cl.moviedbapp.db.MovieEntity
import cl.moviedbapp.repository.MovieRepository

class MovieDataSource(private val repository: MovieRepository) : PagingSource<Int, MovieEntity>() {

    override suspend fun load(params: LoadParams<Int>): LoadResult<Int, MovieEntity> {
        return try {
            val currentPage = params.key ?: 1  // Comienza en la página 1
            val movies = repository.getMoviesFromApi(currentPage) // Llama al método correcto del repositorio

            LoadResult.Page(
                data = movies,
                prevKey = if (currentPage == 1) null else currentPage - 1,
                nextKey = if (movies.isEmpty()) null else currentPage + 1
            )
        } catch (e: Exception) {
            LoadResult.Error(e)
        }
    }

    override fun getRefreshKey(state: PagingState<Int, MovieEntity>): Int? {
        return state.anchorPosition?.let { position ->
            state.closestPageToPosition(position)?.prevKey?.plus(1)
                ?: state.closestPageToPosition(position)?.nextKey?.minus(1)
        }
    }
}

================================================================================

